name: Deploy to EC2 on release push

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Debug EC2_HOST
        run: echo "EC2_HOST is ${{ secrets.EC2_HOST }}"

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem 
      
      - name: Copy `.env` from GitHub Secrets to EC2
        run: |
          touch .env
          sudo chmod 666 .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "debug2"
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "ACCESS_TOKEN_SECRET_KEY=${{ secrets.ACCESS_TOKEN_SECRET_KEY }}" >> .env
          echo "ACCESS_TOKEN_EXPIRES_IN=${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}" >> .env
          echo "REFRESH_TOKEN_SECRET_KEY=${{ secrets.REFRESH_TOKEN_SECRET_KEY }}" >> .env
          echo "REFRESH_TOKEN_EXPIRES_IN=${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}" >> .env
          echo "RPC_AUTH_BASE_URL=${{ secrets.RPC_AUTH_BASE_URL }}" >> .env
          echo "RPC_CATEGORY_BASE_URL=${{ secrets.RPC_CATEGORY_BASE_URL }}" >> .env
          echo "RPC_BRAND_BASE_URL=${{ secrets.RPC_BRAND_BASE_URL }}" >> .env
          echo "RPC_PRODUCT_BASE_URL=${{ secrets.RPC_PRODUCT_BASE_URL }}" >> .env
          echo "RPC_CART_BASE_URL=${{ secrets.RPC_CART_BASE_URL }}" >> .env
          echo "MASTER_TOKEN=${{ secrets.MASTER_TOKEN }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_TOKEN_EXPIRES_IN=${{ secrets.REDIS_TOKEN_EXPIRES_IN }}" >> .env
          echo "REDIS_USE_INFO_EXPIRES_IN=${{ secrets.REDIS_USE_INFO_EXPIRES_IN }}" >> .env
          echo "REDIS_ORDER_EXPIRES_IN=${{ secrets.REDIS_ORDER_EXPIRES_IN }}" >> .env
          echo "KAFKA_ENABLED=${{ secrets.KAFKA_ENABLED }}" >> .env
          echo "KAFKA_BROKER=${{ secrets.KAFKA_BROKER }}" >> .env
          echo "KAFKA_USERNAME=${{ secrets.KAFKA_USERNAME }}" >> .env
          echo "KAFKA_PASSWORD=${{ secrets.KAFKA_PASSWORD }}" >> .env
          echo "copying $GITHUB_WORKSPACE/.env to EC2"
          scp -o StrictHostKeyChecking=no -i private_key.pem $GITHUB_WORKSPACE/.env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/ecom-system/backend/
          echo "completed copy"
          

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # Use port 22 by default; override if necessary:
          port: ${{ secrets.EC2_PORT }}
          script: |
            cd ecom-system # Change this to your repo's directory on the EC2 instance
            git pull origin release
            cd backend
            sudo docker compose up -d --build app
